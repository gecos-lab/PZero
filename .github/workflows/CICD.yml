name: CICD

on:
  push:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Install dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libegl1
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies and run old_tests
        run: |
          pip install -r requirements.txt
          pip install pytest
          pytest

  release:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.semantic.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}
      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@master
        id: semantic
        with:
          github_token: ${{ secrets.TOKEN }}

  deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    needs: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Build executable
        run: |
          pip install -r requirements.txt
          pip install pyinstaller
          pyinstaller --onedir --collect-all rasterio pzero.py --name pzero-${{ runner.os }}
      - name: Zip executable
        run: |
          cd dist
          zip -r pzero-${{ runner.os }}.zip pzero-${{ runner.os }}/*
        shell: bash
      - name: Upload executable
        run: |
          file ="dist/pzero-${{ runner.os }}.zip"
          do
            echo $file
            gh release upload --clobber --repo $GITHUB_REPOSITORY v${{ needs.release.outputs.version }} $file
          done
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
